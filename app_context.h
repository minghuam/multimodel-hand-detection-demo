//
//  app_context.h
//  HandDemo
//
//  Created by Minghuang Ma on 10/22/14.
//
//

#ifndef HandDemo_app_context_h
#define HandDemo_app_context_h

#include "opencv2/opencv.hpp"
#include <vector>
#include "ofMain.h"
#include "ofxKinect.h"
#include "ofxARToolkitPlus.h"

#include <list>

typedef enum{
    APP_STATE_STARTUP,
    APP_STATE_CALIBRATE,
    APP_STATE_LEARN_BACKGROUND,
    APP_STATE_SAMPLE_HANDMODEL,
    APP_STATE_TRAIN_HANDMODEL,
    APP_STATE_SAVING_HANDDETECTION,
    APP_STATE_RUNNING
}APP_STATE;

const std::string state_string[7] = {"Loading...", "In Calibration", "Learning Background", \
    "Sampling Hand Model", "Training", "Saving Hand Detection", "Running"};

#define APP_STATE_TO_STRING(X) (state_string[X])

class AppContext{
    
private:
    AppContext() {};
    AppContext(AppContext const&) {};
    AppContext& operator=(AppContext const&) {};

public:
    
    static AppContext& instance(){
        static AppContext context;
        context.width = 640;
        context.height = 480;
        context.state = APP_STATE_STARTUP;
        context.is_frame_new = false;
        context.is_hand_detected = false;
        context.is_obj_detected = false;
        ofDirectory dir("./");
        context.data_root = dir.getAbsolutePath();
        return context;
    }
     
    
    APP_STATE state;
    int width;
    int height;
    bool is_frame_new;
    
    ofxKinect *kinect;
    ofxARToolkitPlus *artk;
    
    cv::Rect body_roi;
    cv::Rect hand_roi;
    cv::Rect obj_roi;
    
    /* global data */
    cv::Mat rgb;                            // kinect raw RGB image
    cv::Mat bgr;                            // kinect raw image in BGR format
    cv::Mat depth;                          // kinect grayscale depth image
    cv::Mat mask;                           // binary mask generated by mask_generator
    cv::Mat hand_ppr;
    cv::Mat hand_mask;
    cv::Mat obj_mask;
    cv::Mat raw_mask;
    
    cv::Mat current_training_img;
    cv::Mat current_training_msk;
    
    std::string data_root;

    int grasp_label;                        // grasp label probablity distibutions
    float center_of_hand[3];
    float center_of_obj[3];
    float center_of_mass[3];
    
    bool is_hand_detected;
    bool is_obj_detected;
    
    cv::Mat obj_orientation;                // objector detection
    
    float grasp_scores[2];
    
};

#endif
